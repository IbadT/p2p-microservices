syntax = "proto3";

package p2p;

// ------------------------------
// Enums
// ------------------------------

enum ExchangeType {
  CRYPTO2FIAT = 0;   // Сделка: Customer передаёт крипту и получает фиат вне платформы.
  FIAT2CRYPTO = 1;   // Сделка: Customer передаёт фиат вне платформы и получает крипту.
}

enum TransactionStatus {
  PENDING = 0;             // Сделка создана, средства заблокированы, ждём ответа Exchanger'а.
  APPROVED = 1;            // Exchanger принял заявку – сделка начата.
  DECLINED = 2;            // Exchanger отклонил заявку.
  PAYMENT_CONFIRMED = 3;   // Exchanger подтвердил перевод фиата по сделке.
  RECEIPT_CONFIRMED = 4;   // Customer подтвердил получение фиата – сделка завершена.
  FINISHED = 5;            // Сделка завершена (финальное состояние).
  CANCELLED = 6;           // Сделка отменена (например, по таймауту или вручную).
  DISPUTE_OPEN = 7;        // Сделка переведена в спор.
  DISPUTE_RESOLVED = 8;    // Спор разрешён администратором.
}

enum RespondAction {
  ACCEPT = 0;   // Exchanger принимает сделку.
  DECLINE = 1;  // Exchanger отклоняет сделку.
}

enum Role {
  CUSTOMER = 0;
  EXCHANGER = 1;
}

// ------------------------------
// Messages
// ------------------------------

message CreateExchangeOfferRequest {
  string customer_id = 1;          // Идентификатор Customer'а
  string listing_id = 2;           // Идентификатор Exchange Listing
  double amount = 3;               // Сумма сделки
  ExchangeType exchange_type = 4;  // Тип сделки
  string conditions = 5;           // Дополнительные условия
}

message CreateExchangeOfferResponse {
  string offer_id = 1;             // ID предложения
  TransactionStatus status = 2;    // Статус
  string message = 3;              // Сообщение
}

message RespondExchangeOfferRequest {
  string offer_id = 1;
  string exchanger_id = 2;
  RespondAction action = 3;
}

message RespondExchangeOfferResponse {
  string offer_id = 1;
  TransactionStatus status = 2;
  string message = 3;
}

message ConfirmPaymentRequest {
  string offer_id = 1;
  string exchanger_id = 2;
  string payment_reference = 3;
}

message ConfirmPaymentResponse {
  string offer_id = 1;
  TransactionStatus status = 2;
  string message = 3;
}

message ConfirmReceiptRequest {
  string offer_id = 1;
  string customer_id = 2;
}

message ConfirmReceiptResponse {
  string offer_id = 1;
  TransactionStatus status = 2;
  string message = 3;
}

message OpenDisputeRequest {
  string offer_id = 1;
  Role opened_by = 2;
  string reason = 3;
}

message OpenDisputeResponse {
  string dispute_id = 1;
  TransactionStatus status = 2;
  string message = 3;
}

message TransactionStatusRequest {
  string offer_id = 1;
}

message TransactionStatusResponse {
  string offer_id = 1;
  TransactionStatus status = 2;
  string details = 3;
}

message SetExchangerStatusRequest {
  string exchanger_id = 1;
  bool online = 2;
}

message SetExchangerStatusResponse {
  string exchanger_id = 1;
  bool online = 2;
  string message = 3;
}

message CancelTransactionRequest {
  string offer_id = 1;
  Role cancelled_by = 2;
  string reason = 3;
}

message CancelTransactionResponse {
  string offer_id = 1;
  TransactionStatus status = 2;
  string message = 3;
}

message ResolveDisputeRequest {
  string dispute_id = 1;
  string admin_id = 2;
  string resolution = 3;
  string winner_user_id = 4;
  TransactionStatus final_status = 5;
}

message ResolveDisputeResponse {
  string dispute_id = 1;
  TransactionStatus status = 2;
  string message = 3;
  string winner_user_id = 4;
  TransactionStatus final_status = 5;
}

message FreezeExchangerRequest {
  string exchanger_id = 1;
  string reason = 2;
}

message FreezeExchangerResponse {
  string exchanger_id = 1;
  bool is_frozen = 2;
  string message = 3;
}

// ------------------------------
// Service
// ------------------------------

service P2PExchangeService {
  rpc CreateExchangeOffer (CreateExchangeOfferRequest) returns (CreateExchangeOfferResponse);
  rpc RespondExchangeOffer (RespondExchangeOfferRequest) returns (RespondExchangeOfferResponse);
  rpc ConfirmPayment (ConfirmPaymentRequest) returns (ConfirmPaymentResponse);
  rpc ConfirmReceipt (ConfirmReceiptRequest) returns (ConfirmReceiptResponse);
  rpc OpenDispute (OpenDisputeRequest) returns (OpenDisputeResponse);
  rpc GetTransactionStatus (TransactionStatusRequest) returns (TransactionStatusResponse);
  rpc SetExchangerStatus (SetExchangerStatusRequest) returns (SetExchangerStatusResponse);
  rpc CancelTransaction (CancelTransactionRequest) returns (CancelTransactionResponse);
  rpc ResolveDispute (ResolveDisputeRequest) returns (ResolveDisputeResponse);
  rpc FreezeExchanger (FreezeExchangerRequest) returns (FreezeExchangerResponse);
}