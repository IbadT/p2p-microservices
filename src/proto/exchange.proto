syntax = "proto3";

package exchange;

// ------------------------------
// Service
// ------------------------------

service ExchangeService {
  // Listing Operations
  rpc CreateListing (CreateListingRequest) returns (ExchangeListing);
  rpc GetListings (GetListingsRequest) returns (GetListingsResponse);
  
  // Offer Operations
  rpc CreateOffer (CreateOfferRequest) returns (ExchangeOffer);
  rpc RespondOffer (RespondOfferRequest) returns (RespondOfferResponse);
  
  // Transaction Operations
  rpc UpdateTransactionStatus (UpdateTransactionStatusRequest) returns (ExchangeTransaction);
  rpc GetActiveExchanges (GetActiveExchangesRequest) returns (GetActiveExchangesResponse);
  rpc ConfirmPayment (ConfirmPaymentRequest) returns (ConfirmPaymentResponse);
  rpc ConfirmReceipt (ConfirmReceiptRequest) returns (ConfirmReceiptResponse);
  rpc CancelTransaction (CancelTransactionRequest) returns (CancelTransactionResponse);
  
  // Exchanger Management
  rpc SetExchangerStatus (SetExchangerStatusRequest) returns (SetExchangerStatusResponse);
  rpc FreezeExchanger (FreezeExchangerRequest) returns (FreezeExchangerResponse);
  rpc UpdateMissedOffers (UpdateMissedOffersRequest) returns (ExchangerStatus);
  rpc GetExchangerStatus (GetExchangerStatusRequest) returns (ExchangerStatus);
  rpc UnfreezeExchanger (UnfreezeExchangerRequest) returns (ExchangerStatus);
}

// ------------------------------
// Messages
// ------------------------------

// Enums
enum ExchangeType {
  CRYPTO_TO_FIAT = 0;  // Customer передаёт крипту и получает фиат вне платформы
  FIAT_TO_CRYPTO = 1;  // Customer передаёт фиат вне платформы и получает крипту
}

enum TransactionStatus {
  PENDING = 0;           // Оффер создан, ожидает ответа Exchanger'а
  ACTIVE = 1;            // Оффер принят, сделка активна
  DECLINED = 2;          // Оффер отклонён
  PAYMENT_CONFIRMED = 3; // Платеж подтверждён
  RECEIPT_CONFIRMED = 4; // Получение подтверждено
  FINISHED = 5;          // Сделка завершена успешно
  CANCELLED = 6;         // Сделка отменена
  DISPUTE_OPEN = 7;      // Открыт спор
  DISPUTE_RESOLVED = 8;  // Спор разрешён
}

enum RespondAction {
  ACCEPT = 0;
  DECLINE = 1;
}

enum Role {
  CUSTOMER = 0;
  EXCHANGER = 1;
  MODERATOR = 2;
}

// Messages
message CreateListingRequest {
  string userId = 1;
  ExchangeType type = 2;
  string cryptocurrency = 3;
  string fiatCurrency = 4;
  double rate = 5;
  double minAmount = 6;
  double maxAmount = 7;
  double availableAmount = 8;
  repeated string paymentMethods = 9;
  optional string terms = 10;
}

message ExchangeListing {
  string id = 1;
  ExchangeType type = 2;
  string cryptocurrency = 3;
  string fiatCurrency = 4;
  double rate = 5;
  double minAmount = 6;
  double maxAmount = 7;
  double availableAmount = 8;
  repeated string paymentMethods = 9;
  optional string terms = 10;
  string userId = 11;
  bool isActive = 12;
  string createdAt = 13;
  string updatedAt = 14;
}

message GetListingsRequest {
  optional ExchangeType type = 1;
  optional string cryptocurrency = 2;
  optional string fiatCurrency = 3;
  optional double minRate = 4;
  optional double maxRate = 5;
  repeated string paymentMethods = 6;
  optional bool isActive = 7;
}

message GetListingsResponse {
  repeated ExchangeListing listings = 1;
}

message CreateOfferRequest {
  string userId = 1;
  string listingId = 2;
  double amount = 3;
}

message ExchangeOffer {
  string id = 1;
  double amount = 2;
  TransactionStatus status = 3;
  string userId = 4;
  string listingId = 5;
  string createdAt = 6;
  string updatedAt = 7;
}

message RespondOfferRequest {
  string offerId = 1;
  string exchangerId = 2;
  RespondAction action = 3;
}

message RespondOfferResponse {
  string offerId = 1;
  TransactionStatus status = 2;
  string message = 3;
}

message UpdateTransactionStatusRequest {
  string transactionId = 1;
  string userId = 2;
  TransactionStatus status = 3;
  optional string paymentProof = 4;
}

message ExchangeTransaction {
  string id = 1;
  ExchangeType type = 2;
  TransactionStatus status = 3;
  string cryptocurrency = 4;
  string fiatCurrency = 5;
  double cryptoAmount = 6;
  double fiatAmount = 7;
  optional string paymentProof = 8;
  optional string disputeId = 9;
  string confirmationDeadline = 10;  // TTL для завершённых сделок
  bool canCustomerDispute = 11;     // Может ли Customer открыть спор
  bool canExchangerDispute = 12;    // Может ли Exchanger открыть спор
  bool isActive = 13;
  string customerId = 14;
  string exchangerId = 15;
  string listingId = 16;
  optional string offerId = 17;
  string createdAt = 18;
  string updatedAt = 19;
  optional string finishedAt = 20;
}

message GetActiveExchangesRequest {
  string userId = 1;
}

message GetActiveExchangesResponse {
  repeated ExchangeTransaction transactions = 1;
}

message ConfirmPaymentRequest {
  string transactionId = 1;
  string exchangerId = 2;
  string paymentReference = 3;
  string bankId = 4;
  string bankTransactionId = 5;
  string screenshotUrl = 6;
  string additionalNotes = 7;
}

message ConfirmPaymentResponse {
  string transactionId = 1;
  TransactionStatus status = 2;
  string message = 3;
}

message ConfirmReceiptRequest {
  string transactionId = 1;
  string customerId = 2;
}

message ConfirmReceiptResponse {
  string transactionId = 1;
  TransactionStatus status = 2;
  string message = 3;
}

message CancelTransactionRequest {
  string transactionId = 1;
  Role cancelledBy = 2;
  string reason = 3;
}

message CancelTransactionResponse {
  string transactionId = 1;
  TransactionStatus status = 2;
  string message = 3;
}

message SetExchangerStatusRequest {
  string exchangerId = 1;
  bool online = 2;
}

message SetExchangerStatusResponse {
  string exchangerId = 1;
  bool online = 2;
  string message = 3;
}

message FreezeExchangerRequest {
  string exchangerId = 1;
  string reason = 2;
}

message FreezeExchangerResponse {
  string exchangerId = 1;
  bool isFrozen = 2;
  string message = 3;
}

message UpdateMissedOffersRequest {
  string exchangerId = 1;
  bool increment = 2;
}

message GetExchangerStatusRequest {
  string exchangerId = 1;
}

message UnfreezeExchangerRequest {
  string exchangerId = 1;
}

message ExchangerStatus {
  string exchangerId = 1;
  bool online = 2;
  string lastActiveAt = 3;
  bool isFrozen = 4;
  int32 missedOffersCount = 5;
} 