// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: src/proto/user.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

export interface CreateUserRequest {
  email: string;
  password: string;
  firstName: string;
  lastName: string;
  phoneNumber: string;
  isExchanger: boolean;
}

export interface UpdateUserRequest {
  userId: string;
  firstName?: string | undefined;
  lastName?: string | undefined;
  phoneNumber?: string | undefined;
  isExchanger?: boolean | undefined;
  isExchangerActive?: boolean | undefined;
}

export interface GetUserRequest {
  userId: string;
}

export interface User {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  phoneNumber: string;
  isExchanger: boolean;
  isExchangerActive: boolean;
  isFrozen: boolean;
  createdAt: string;
  updatedAt: string;
}

export const USER_PACKAGE_NAME = "user";

export interface UserServiceClient {
  createUser(request: CreateUserRequest, metadata?: Metadata): Observable<User>;

  updateUser(request: UpdateUserRequest, metadata?: Metadata): Observable<User>;

  getUser(request: GetUserRequest, metadata?: Metadata): Observable<User>;
}

export interface UserServiceController {
  createUser(request: CreateUserRequest, metadata?: Metadata): Promise<User> | Observable<User> | User;

  updateUser(request: UpdateUserRequest, metadata?: Metadata): Promise<User> | Observable<User> | User;

  getUser(request: GetUserRequest, metadata?: Metadata): Promise<User> | Observable<User> | User;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUser", "updateUser", "getUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
