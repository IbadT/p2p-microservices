// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: src/proto/scheduler.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "scheduler";

export interface CreateScheduledTaskRequest {
  name: string;
  type: string;
  schedule: string;
  data: string;
  enabled: boolean;
}

export interface UpdateScheduledTaskRequest {
  taskId: string;
  name?: string | undefined;
  schedule?: string | undefined;
  data?: string | undefined;
  enabled?: boolean | undefined;
}

export interface GetScheduledTaskRequest {
  taskId: string;
}

export interface ListScheduledTasksRequest {
  type?: string | undefined;
  enabled?: boolean | undefined;
  page: number;
  limit: number;
}

export interface ScheduledTasksResponse {
  tasks: ScheduledTask[];
  total: number;
  page: number;
  limit: number;
}

export interface ScheduledTask {
  id: string;
  name: string;
  type: string;
  schedule: string;
  data: string;
  enabled: boolean;
  lastRunAt: string;
  nextRunAt: string;
  createdAt: string;
  updatedAt: string;
}

export const SCHEDULER_PACKAGE_NAME = "scheduler";

export interface SchedulerServiceClient {
  createScheduledTask(request: CreateScheduledTaskRequest, metadata?: Metadata): Observable<ScheduledTask>;

  updateScheduledTask(request: UpdateScheduledTaskRequest, metadata?: Metadata): Observable<ScheduledTask>;

  getScheduledTask(request: GetScheduledTaskRequest, metadata?: Metadata): Observable<ScheduledTask>;

  listScheduledTasks(request: ListScheduledTasksRequest, metadata?: Metadata): Observable<ScheduledTasksResponse>;
}

export interface SchedulerServiceController {
  createScheduledTask(
    request: CreateScheduledTaskRequest,
    metadata?: Metadata,
  ): Promise<ScheduledTask> | Observable<ScheduledTask> | ScheduledTask;

  updateScheduledTask(
    request: UpdateScheduledTaskRequest,
    metadata?: Metadata,
  ): Promise<ScheduledTask> | Observable<ScheduledTask> | ScheduledTask;

  getScheduledTask(
    request: GetScheduledTaskRequest,
    metadata?: Metadata,
  ): Promise<ScheduledTask> | Observable<ScheduledTask> | ScheduledTask;

  listScheduledTasks(
    request: ListScheduledTasksRequest,
    metadata?: Metadata,
  ): Promise<ScheduledTasksResponse> | Observable<ScheduledTasksResponse> | ScheduledTasksResponse;
}

export function SchedulerServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createScheduledTask",
      "updateScheduledTask",
      "getScheduledTask",
      "listScheduledTasks",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("SchedulerService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("SchedulerService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SCHEDULER_SERVICE_NAME = "SchedulerService";
