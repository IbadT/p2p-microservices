// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: src/proto/disputes.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "disputes";

export interface User {
  id: string;
  name: string;
  role: string;
}

export interface Chat {
  id: string;
  type: string;
  disputeId: string;
  createdAt: string;
  updatedAt: string;
}

export interface CreateDisputeRequest {
  transactionId: string;
  initiatorId: string;
  reason: string;
}

export interface ResolveDisputeRequest {
  disputeId: string;
  resolution: string;
  moderatorId: string;
  winnerId: string;
}

export interface GetDisputesByUserRequest {
  userId: string;
}

export interface GetDisputesByUserResponse {
  disputes: Dispute[];
}

export interface GetOpenDisputesRequest {
}

export interface GetOpenDisputesResponse {
  disputes: Dispute[];
}

export interface Dispute {
  id: string;
  transactionId: string;
  initiatorId: string;
  reason: string;
  status: string;
  moderatorId: string;
  resolution: string;
  winnerUserId: string;
  createdAt: string;
  updatedAt: string;
}

export interface GetDisputeChatRequest {
  disputeId: string;
  userId: string;
}

export interface AddDisputeCommentRequest {
  disputeId: string;
  userId: string;
  text: string;
}

export interface GetDisputeCommentsRequest {
  disputeId: string;
  userId: string;
  page: number;
  limit: number;
}

export interface GetDisputeCommentsResponse {
  comments: Comment[];
  total: number;
  page: number;
  limit: number;
}

export interface Comment {
  id: string;
  disputeId: string;
  userId: string;
  text: string;
  isModerator: boolean;
  createdAt: string;
  user: User | undefined;
}

export interface ResolveDisputeResponse {
  disputeId: string;
  status: string;
  resolution: string;
  winnerUserId: string;
  transactionId: string;
  finalStatus: string;
}

export interface GetDisputeBalanceRequest {
  disputeId: string;
}

export interface GetDisputeBalanceResponse {
  cryptoAmount: number;
  cryptocurrency: string;
  fiatAmount: number;
  fiatCurrency: string;
  customerBalance: BalanceInfo | undefined;
  exchangerBalance: BalanceInfo | undefined;
}

export interface BalanceInfo {
  crypto: { [key: string]: number };
  fiat: { [key: string]: number };
}

export interface BalanceInfo_CryptoEntry {
  key: string;
  value: number;
}

export interface BalanceInfo_FiatEntry {
  key: string;
  value: number;
}

export interface AddModeratorCommentRequest {
  disputeId: string;
  moderatorId: string;
  text: string;
}

export interface AddModeratorCommentResponse {
  commentId: string;
  disputeId: string;
  moderatorId: string;
  text: string;
  createdAt: string;
}

export const DISPUTES_PACKAGE_NAME = "disputes";

export interface DisputeServiceClient {
  createDispute(request: CreateDisputeRequest, metadata?: Metadata): Observable<Dispute>;

  resolveDispute(request: ResolveDisputeRequest, metadata?: Metadata): Observable<Dispute>;

  getDisputesByUser(request: GetDisputesByUserRequest, metadata?: Metadata): Observable<GetDisputesByUserResponse>;

  getOpenDisputes(request: GetOpenDisputesRequest, metadata?: Metadata): Observable<GetOpenDisputesResponse>;

  getDisputeChat(request: GetDisputeChatRequest, metadata?: Metadata): Observable<Chat>;

  addDisputeComment(request: AddDisputeCommentRequest, metadata?: Metadata): Observable<Comment>;

  getDisputeComments(request: GetDisputeCommentsRequest, metadata?: Metadata): Observable<GetDisputeCommentsResponse>;

  getDisputeBalance(request: GetDisputeBalanceRequest, metadata?: Metadata): Observable<GetDisputeBalanceResponse>;

  addModeratorComment(
    request: AddModeratorCommentRequest,
    metadata?: Metadata,
  ): Observable<AddModeratorCommentResponse>;
}

export interface DisputeServiceController {
  createDispute(request: CreateDisputeRequest, metadata?: Metadata): Promise<Dispute> | Observable<Dispute> | Dispute;

  resolveDispute(request: ResolveDisputeRequest, metadata?: Metadata): Promise<Dispute> | Observable<Dispute> | Dispute;

  getDisputesByUser(
    request: GetDisputesByUserRequest,
    metadata?: Metadata,
  ): Promise<GetDisputesByUserResponse> | Observable<GetDisputesByUserResponse> | GetDisputesByUserResponse;

  getOpenDisputes(
    request: GetOpenDisputesRequest,
    metadata?: Metadata,
  ): Promise<GetOpenDisputesResponse> | Observable<GetOpenDisputesResponse> | GetOpenDisputesResponse;

  getDisputeChat(request: GetDisputeChatRequest, metadata?: Metadata): Promise<Chat> | Observable<Chat> | Chat;

  addDisputeComment(
    request: AddDisputeCommentRequest,
    metadata?: Metadata,
  ): Promise<Comment> | Observable<Comment> | Comment;

  getDisputeComments(
    request: GetDisputeCommentsRequest,
    metadata?: Metadata,
  ): Promise<GetDisputeCommentsResponse> | Observable<GetDisputeCommentsResponse> | GetDisputeCommentsResponse;

  getDisputeBalance(
    request: GetDisputeBalanceRequest,
    metadata?: Metadata,
  ): Promise<GetDisputeBalanceResponse> | Observable<GetDisputeBalanceResponse> | GetDisputeBalanceResponse;

  addModeratorComment(
    request: AddModeratorCommentRequest,
    metadata?: Metadata,
  ): Promise<AddModeratorCommentResponse> | Observable<AddModeratorCommentResponse> | AddModeratorCommentResponse;
}

export function DisputeServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createDispute",
      "resolveDispute",
      "getDisputesByUser",
      "getOpenDisputes",
      "getDisputeChat",
      "addDisputeComment",
      "getDisputeComments",
      "getDisputeBalance",
      "addModeratorComment",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("DisputeService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("DisputeService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const DISPUTE_SERVICE_NAME = "DisputeService";
