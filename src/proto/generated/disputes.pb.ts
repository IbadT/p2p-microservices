// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: src/proto/disputes.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "disputes";

export interface CreateDisputeRequest {
  transactionId: string;
  initiatorId: string;
  reason: string;
}

export interface ResolveDisputeRequest {
  disputeId: string;
  moderatorId: string;
  resolution: string;
  winnerUserId: string;
}

export interface GetDisputesByUserRequest {
  userId: string;
}

export interface GetDisputesByUserResponse {
  disputes: Dispute[];
}

export interface GetOpenDisputesRequest {
}

export interface GetOpenDisputesResponse {
  disputes: Dispute[];
}

export interface Dispute {
  id: string;
  transactionId: string;
  initiatorId: string;
  reason: string;
  status: string;
  moderatorId: string;
  resolution: string;
  winnerUserId: string;
  createdAt: string;
  updatedAt: string;
}

export const DISPUTES_PACKAGE_NAME = "disputes";

export interface DisputeServiceClient {
  createDispute(request: CreateDisputeRequest, metadata?: Metadata): Observable<Dispute>;

  resolveDispute(request: ResolveDisputeRequest, metadata?: Metadata): Observable<Dispute>;

  getDisputesByUser(request: GetDisputesByUserRequest, metadata?: Metadata): Observable<GetDisputesByUserResponse>;

  getOpenDisputes(request: GetOpenDisputesRequest, metadata?: Metadata): Observable<GetOpenDisputesResponse>;
}

export interface DisputeServiceController {
  createDispute(request: CreateDisputeRequest, metadata?: Metadata): Promise<Dispute> | Observable<Dispute> | Dispute;

  resolveDispute(request: ResolveDisputeRequest, metadata?: Metadata): Promise<Dispute> | Observable<Dispute> | Dispute;

  getDisputesByUser(
    request: GetDisputesByUserRequest,
    metadata?: Metadata,
  ): Promise<GetDisputesByUserResponse> | Observable<GetDisputesByUserResponse> | GetDisputesByUserResponse;

  getOpenDisputes(
    request: GetOpenDisputesRequest,
    metadata?: Metadata,
  ): Promise<GetOpenDisputesResponse> | Observable<GetOpenDisputesResponse> | GetOpenDisputesResponse;
}

export function DisputeServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createDispute", "resolveDispute", "getDisputesByUser", "getOpenDisputes"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("DisputeService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("DisputeService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const DISPUTE_SERVICE_NAME = "DisputeService";
