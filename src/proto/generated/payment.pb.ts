// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: src/proto/payment.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "payment";

export interface PaymentWebhookRequest {
  transactionId: string;
  status: string;
  provider: string;
  amount: number;
  currency: string;
  reference?: string | undefined;
  metadata?: string | undefined;
}

export interface PaymentWebhookResponse {
  success: boolean;
  message: string;
}

export interface GetPaymentStatusRequest {
  transactionId: string;
}

export interface GetPaymentStatusResponse {
  status: string;
  provider: string;
  amount: number;
  currency: string;
  reference?: string | undefined;
  metadata?: string | undefined;
}

export const PAYMENT_PACKAGE_NAME = "payment";

export interface PaymentServiceClient {
  handleWebhook(request: PaymentWebhookRequest, metadata?: Metadata): Observable<PaymentWebhookResponse>;

  getPaymentStatus(request: GetPaymentStatusRequest, metadata?: Metadata): Observable<GetPaymentStatusResponse>;
}

export interface PaymentServiceController {
  handleWebhook(
    request: PaymentWebhookRequest,
    metadata?: Metadata,
  ): Promise<PaymentWebhookResponse> | Observable<PaymentWebhookResponse> | PaymentWebhookResponse;

  getPaymentStatus(
    request: GetPaymentStatusRequest,
    metadata?: Metadata,
  ): Promise<GetPaymentStatusResponse> | Observable<GetPaymentStatusResponse> | GetPaymentStatusResponse;
}

export function PaymentServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["handleWebhook", "getPaymentStatus"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PaymentService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PaymentService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PAYMENT_SERVICE_NAME = "PaymentService";
