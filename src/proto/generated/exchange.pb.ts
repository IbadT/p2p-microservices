// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: src/proto/exchange.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "exchange";

/** Enums */
export enum ExchangeType {
  /** CRYPTO_TO_FIAT - Customer передаёт крипту и получает фиат вне платформы */
  CRYPTO_TO_FIAT = 0,
  /** FIAT_TO_CRYPTO - Customer передаёт фиат вне платформы и получает крипту */
  FIAT_TO_CRYPTO = 1,
  UNRECOGNIZED = -1,
}

export enum TransactionStatus {
  /** PENDING - Оффер создан, ожидает ответа Exchanger'а */
  PENDING = 0,
  /** ACTIVE - Оффер принят, сделка активна */
  ACTIVE = 1,
  /** DECLINED - Оффер отклонён */
  DECLINED = 2,
  /** PAYMENT_CONFIRMED - Платеж подтверждён */
  PAYMENT_CONFIRMED = 3,
  /** RECEIPT_CONFIRMED - Получение подтверждено */
  RECEIPT_CONFIRMED = 4,
  /** FINISHED - Сделка завершена успешно */
  FINISHED = 5,
  /** CANCELLED - Сделка отменена */
  CANCELLED = 6,
  /** DISPUTE_OPEN - Открыт спор */
  DISPUTE_OPEN = 7,
  /** DISPUTE_RESOLVED - Спор разрешён */
  DISPUTE_RESOLVED = 8,
  UNRECOGNIZED = -1,
}

export enum RespondAction {
  ACCEPT = 0,
  DECLINE = 1,
  UNRECOGNIZED = -1,
}

export enum Role {
  CUSTOMER = 0,
  EXCHANGER = 1,
  MODERATOR = 2,
  UNRECOGNIZED = -1,
}

/** Messages */
export interface CreateListingRequest {
  userId: string;
  type: ExchangeType;
  cryptocurrency: string;
  fiatCurrency: string;
  rate: number;
  minAmount: number;
  maxAmount: number;
  availableAmount: number;
  paymentMethods: string[];
  terms?: string | undefined;
}

export interface ExchangeListing {
  id: string;
  type: ExchangeType;
  cryptocurrency: string;
  fiatCurrency: string;
  rate: number;
  minAmount: number;
  maxAmount: number;
  availableAmount: number;
  paymentMethods: string[];
  terms?: string | undefined;
  userId: string;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface GetListingsRequest {
  type?: ExchangeType | undefined;
  cryptocurrency?: string | undefined;
  fiatCurrency?: string | undefined;
  minRate?: number | undefined;
  maxRate?: number | undefined;
  paymentMethods: string[];
  isActive?: boolean | undefined;
}

export interface GetListingsResponse {
  listings: ExchangeListing[];
}

export interface CreateOfferRequest {
  userId: string;
  listingId: string;
  amount: number;
}

export interface ExchangeOffer {
  id: string;
  amount: number;
  status: TransactionStatus;
  userId: string;
  listingId: string;
  createdAt: string;
  updatedAt: string;
}

export interface RespondOfferRequest {
  offerId: string;
  exchangerId: string;
  action: RespondAction;
}

export interface RespondOfferResponse {
  offerId: string;
  status: TransactionStatus;
  message: string;
}

export interface UpdateTransactionStatusRequest {
  transactionId: string;
  userId: string;
  status: TransactionStatus;
  paymentProof?: string | undefined;
}

export interface ExchangeTransaction {
  id: string;
  type: ExchangeType;
  status: TransactionStatus;
  cryptocurrency: string;
  fiatCurrency: string;
  cryptoAmount: number;
  fiatAmount: number;
  paymentProof?: string | undefined;
  disputeId?:
    | string
    | undefined;
  /** TTL для завершённых сделок */
  confirmationDeadline: string;
  /** Может ли Customer открыть спор */
  canCustomerDispute: boolean;
  /** Может ли Exchanger открыть спор */
  canExchangerDispute: boolean;
  isActive: boolean;
  customerId: string;
  exchangerId: string;
  listingId: string;
  offerId?: string | undefined;
  createdAt: string;
  updatedAt: string;
  finishedAt?: string | undefined;
}

export interface GetActiveExchangesRequest {
  userId: string;
}

export interface GetActiveExchangesResponse {
  transactions: ExchangeTransaction[];
}

export interface ConfirmPaymentRequest {
  transactionId: string;
  exchangerId: string;
  paymentReference: string;
  bankId: string;
  bankTransactionId: string;
  screenshotUrl: string;
  additionalNotes: string;
}

export interface ConfirmPaymentResponse {
  transactionId: string;
  status: TransactionStatus;
  message: string;
}

export interface ConfirmReceiptRequest {
  transactionId: string;
  customerId: string;
}

export interface ConfirmReceiptResponse {
  transactionId: string;
  status: TransactionStatus;
  message: string;
}

export interface CancelTransactionRequest {
  transactionId: string;
  cancelledBy: Role;
  reason: string;
}

export interface CancelTransactionResponse {
  transactionId: string;
  status: TransactionStatus;
  message: string;
}

export interface SetExchangerStatusRequest {
  exchangerId: string;
  online: boolean;
}

export interface SetExchangerStatusResponse {
  exchangerId: string;
  online: boolean;
  message: string;
}

export interface FreezeExchangerRequest {
  exchangerId: string;
  reason: string;
}

export interface FreezeExchangerResponse {
  exchangerId: string;
  isFrozen: boolean;
  message: string;
}

export interface UpdateMissedOffersRequest {
  exchangerId: string;
  increment: boolean;
}

export interface GetExchangerStatusRequest {
  exchangerId: string;
}

export interface UnfreezeExchangerRequest {
  exchangerId: string;
}

export interface ExchangerStatus {
  exchangerId: string;
  online: boolean;
  lastActiveAt: string;
  isFrozen: boolean;
  missedOffersCount: number;
}

export const EXCHANGE_PACKAGE_NAME = "exchange";

export interface ExchangeServiceClient {
  /** Listing Operations */

  createListing(request: CreateListingRequest, metadata?: Metadata): Observable<ExchangeListing>;

  getListings(request: GetListingsRequest, metadata?: Metadata): Observable<GetListingsResponse>;

  /** Offer Operations */

  createOffer(request: CreateOfferRequest, metadata?: Metadata): Observable<ExchangeOffer>;

  respondOffer(request: RespondOfferRequest, metadata?: Metadata): Observable<RespondOfferResponse>;

  /** Transaction Operations */

  updateTransactionStatus(
    request: UpdateTransactionStatusRequest,
    metadata?: Metadata,
  ): Observable<ExchangeTransaction>;

  getActiveExchanges(request: GetActiveExchangesRequest, metadata?: Metadata): Observable<GetActiveExchangesResponse>;

  confirmPayment(request: ConfirmPaymentRequest, metadata?: Metadata): Observable<ConfirmPaymentResponse>;

  confirmReceipt(request: ConfirmReceiptRequest, metadata?: Metadata): Observable<ConfirmReceiptResponse>;

  cancelTransaction(request: CancelTransactionRequest, metadata?: Metadata): Observable<CancelTransactionResponse>;

  /** Exchanger Management */

  setExchangerStatus(request: SetExchangerStatusRequest, metadata?: Metadata): Observable<SetExchangerStatusResponse>;

  freezeExchanger(request: FreezeExchangerRequest, metadata?: Metadata): Observable<FreezeExchangerResponse>;

  updateMissedOffers(request: UpdateMissedOffersRequest, metadata?: Metadata): Observable<ExchangerStatus>;

  getExchangerStatus(request: GetExchangerStatusRequest, metadata?: Metadata): Observable<ExchangerStatus>;

  unfreezeExchanger(request: UnfreezeExchangerRequest, metadata?: Metadata): Observable<ExchangerStatus>;
}

export interface ExchangeServiceController {
  /** Listing Operations */

  createListing(
    request: CreateListingRequest,
    metadata?: Metadata,
  ): Promise<ExchangeListing> | Observable<ExchangeListing> | ExchangeListing;

  getListings(
    request: GetListingsRequest,
    metadata?: Metadata,
  ): Promise<GetListingsResponse> | Observable<GetListingsResponse> | GetListingsResponse;

  /** Offer Operations */

  createOffer(
    request: CreateOfferRequest,
    metadata?: Metadata,
  ): Promise<ExchangeOffer> | Observable<ExchangeOffer> | ExchangeOffer;

  respondOffer(
    request: RespondOfferRequest,
    metadata?: Metadata,
  ): Promise<RespondOfferResponse> | Observable<RespondOfferResponse> | RespondOfferResponse;

  /** Transaction Operations */

  updateTransactionStatus(
    request: UpdateTransactionStatusRequest,
    metadata?: Metadata,
  ): Promise<ExchangeTransaction> | Observable<ExchangeTransaction> | ExchangeTransaction;

  getActiveExchanges(
    request: GetActiveExchangesRequest,
    metadata?: Metadata,
  ): Promise<GetActiveExchangesResponse> | Observable<GetActiveExchangesResponse> | GetActiveExchangesResponse;

  confirmPayment(
    request: ConfirmPaymentRequest,
    metadata?: Metadata,
  ): Promise<ConfirmPaymentResponse> | Observable<ConfirmPaymentResponse> | ConfirmPaymentResponse;

  confirmReceipt(
    request: ConfirmReceiptRequest,
    metadata?: Metadata,
  ): Promise<ConfirmReceiptResponse> | Observable<ConfirmReceiptResponse> | ConfirmReceiptResponse;

  cancelTransaction(
    request: CancelTransactionRequest,
    metadata?: Metadata,
  ): Promise<CancelTransactionResponse> | Observable<CancelTransactionResponse> | CancelTransactionResponse;

  /** Exchanger Management */

  setExchangerStatus(
    request: SetExchangerStatusRequest,
    metadata?: Metadata,
  ): Promise<SetExchangerStatusResponse> | Observable<SetExchangerStatusResponse> | SetExchangerStatusResponse;

  freezeExchanger(
    request: FreezeExchangerRequest,
    metadata?: Metadata,
  ): Promise<FreezeExchangerResponse> | Observable<FreezeExchangerResponse> | FreezeExchangerResponse;

  updateMissedOffers(
    request: UpdateMissedOffersRequest,
    metadata?: Metadata,
  ): Promise<ExchangerStatus> | Observable<ExchangerStatus> | ExchangerStatus;

  getExchangerStatus(
    request: GetExchangerStatusRequest,
    metadata?: Metadata,
  ): Promise<ExchangerStatus> | Observable<ExchangerStatus> | ExchangerStatus;

  unfreezeExchanger(
    request: UnfreezeExchangerRequest,
    metadata?: Metadata,
  ): Promise<ExchangerStatus> | Observable<ExchangerStatus> | ExchangerStatus;
}

export function ExchangeServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createListing",
      "getListings",
      "createOffer",
      "respondOffer",
      "updateTransactionStatus",
      "getActiveExchanges",
      "confirmPayment",
      "confirmReceipt",
      "cancelTransaction",
      "setExchangerStatus",
      "freezeExchanger",
      "updateMissedOffers",
      "getExchangerStatus",
      "unfreezeExchanger",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ExchangeService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ExchangeService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const EXCHANGE_SERVICE_NAME = "ExchangeService";
