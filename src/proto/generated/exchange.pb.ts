// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: src/proto/exchange.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "exchange";

export interface CreateListingRequest {
  userId: string;
  type: string;
  cryptocurrency: string;
  fiatCurrency: string;
  rate: number;
  minAmount: number;
  maxAmount: number;
  availableAmount: number;
  paymentMethods: string[];
  terms?: string | undefined;
}

export interface ExchangeListing {
  id: string;
  type: string;
  cryptocurrency: string;
  fiatCurrency: string;
  rate: number;
  minAmount: number;
  maxAmount: number;
  availableAmount: number;
  paymentMethods: string[];
  terms?: string | undefined;
  userId: string;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface GetListingsRequest {
  type?: string | undefined;
  cryptocurrency?: string | undefined;
  fiatCurrency?: string | undefined;
  minRate?: number | undefined;
  maxRate?: number | undefined;
  paymentMethods: string[];
  isActive?: boolean | undefined;
}

export interface GetListingsResponse {
  listings: ExchangeListing[];
}

export interface CreateOfferRequest {
  userId: string;
  listingId: string;
  amount: number;
}

export interface ExchangeOffer {
  id: string;
  amount: number;
  status: string;
  userId: string;
  listingId: string;
  createdAt: string;
  updatedAt: string;
}

export interface UpdateTransactionStatusRequest {
  transactionId: string;
  userId: string;
  status: string;
  paymentProof?: string | undefined;
}

export interface ExchangeTransaction {
  id: string;
  type: string;
  status: string;
  cryptocurrency: string;
  fiatCurrency: string;
  cryptoAmount: number;
  fiatAmount: number;
  paymentProof?: string | undefined;
  disputeId?: string | undefined;
  confirmationDeadline: string;
  canCustomerDispute: boolean;
  canExchangerDispute: boolean;
  isActive: boolean;
  customerId: string;
  exchangerId: string;
  listingId: string;
  offerId?: string | undefined;
  createdAt: string;
  updatedAt: string;
  finishedAt?: string | undefined;
}

export interface GetActiveExchangesRequest {
  userId: string;
}

export interface GetActiveExchangesResponse {
  transactions: ExchangeTransaction[];
}

export const EXCHANGE_PACKAGE_NAME = "exchange";

export interface ExchangeServiceClient {
  createListing(request: CreateListingRequest, metadata?: Metadata): Observable<ExchangeListing>;

  getListings(request: GetListingsRequest, metadata?: Metadata): Observable<GetListingsResponse>;

  createOffer(request: CreateOfferRequest, metadata?: Metadata): Observable<ExchangeOffer>;

  updateTransactionStatus(
    request: UpdateTransactionStatusRequest,
    metadata?: Metadata,
  ): Observable<ExchangeTransaction>;

  getActiveExchanges(request: GetActiveExchangesRequest, metadata?: Metadata): Observable<GetActiveExchangesResponse>;
}

export interface ExchangeServiceController {
  createListing(
    request: CreateListingRequest,
    metadata?: Metadata,
  ): Promise<ExchangeListing> | Observable<ExchangeListing> | ExchangeListing;

  getListings(
    request: GetListingsRequest,
    metadata?: Metadata,
  ): Promise<GetListingsResponse> | Observable<GetListingsResponse> | GetListingsResponse;

  createOffer(
    request: CreateOfferRequest,
    metadata?: Metadata,
  ): Promise<ExchangeOffer> | Observable<ExchangeOffer> | ExchangeOffer;

  updateTransactionStatus(
    request: UpdateTransactionStatusRequest,
    metadata?: Metadata,
  ): Promise<ExchangeTransaction> | Observable<ExchangeTransaction> | ExchangeTransaction;

  getActiveExchanges(
    request: GetActiveExchangesRequest,
    metadata?: Metadata,
  ): Promise<GetActiveExchangesResponse> | Observable<GetActiveExchangesResponse> | GetActiveExchangesResponse;
}

export function ExchangeServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createListing",
      "getListings",
      "createOffer",
      "updateTransactionStatus",
      "getActiveExchanges",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ExchangeService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ExchangeService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const EXCHANGE_SERVICE_NAME = "ExchangeService";
