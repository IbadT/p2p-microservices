// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: src/proto/reviews.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "reviews";

export interface CreateReviewRequest {
  transactionId: string;
  authorId: string;
  targetId: string;
  rating: number;
  comment: string;
}

export interface UpdateReviewRequest {
  reviewId: string;
  rating?: number | undefined;
  comment?: string | undefined;
}

export interface GetReviewRequest {
  reviewId: string;
}

export interface GetUserReviewsRequest {
  userId: string;
  asReviewer: boolean;
  page: number;
  limit: number;
}

export interface ReviewsResponse {
  reviews: Review[];
  total: number;
  page: number;
  limit: number;
}

export interface Review {
  id: string;
  reviewerId: string;
  reviewedId: string;
  rating: number;
  comment: string;
  exchangeId: string;
  createdAt: string;
  updatedAt: string;
}

export interface GetReviewStatsRequest {
  userId: string;
  startDate?: string | undefined;
  endDate?: string | undefined;
}

export interface ReviewStats {
  averageRating: number;
  totalReviews: number;
  ratingDistribution: { [key: number]: number };
  positivePercentage: number;
  negativePercentage: number;
  neutralPercentage: number;
  recentComments: string[];
  totalExchanges: number;
  reviewRate: number;
}

export interface ReviewStats_RatingDistributionEntry {
  key: number;
  value: number;
}

export interface GetReviewStatsResponse {
  stats: ReviewStats | undefined;
  userId: string;
  periodStart: string;
  periodEnd: string;
}

export const REVIEWS_PACKAGE_NAME = "reviews";

export interface ReviewsServiceClient {
  createReview(request: CreateReviewRequest, metadata?: Metadata): Observable<Review>;

  updateReview(request: UpdateReviewRequest, metadata?: Metadata): Observable<Review>;

  getReview(request: GetReviewRequest, metadata?: Metadata): Observable<Review>;

  getUserReviews(request: GetUserReviewsRequest, metadata?: Metadata): Observable<ReviewsResponse>;

  getReviewStats(request: GetReviewStatsRequest, metadata?: Metadata): Observable<GetReviewStatsResponse>;
}

export interface ReviewsServiceController {
  createReview(request: CreateReviewRequest, metadata?: Metadata): Promise<Review> | Observable<Review> | Review;

  updateReview(request: UpdateReviewRequest, metadata?: Metadata): Promise<Review> | Observable<Review> | Review;

  getReview(request: GetReviewRequest, metadata?: Metadata): Promise<Review> | Observable<Review> | Review;

  getUserReviews(
    request: GetUserReviewsRequest,
    metadata?: Metadata,
  ): Promise<ReviewsResponse> | Observable<ReviewsResponse> | ReviewsResponse;

  getReviewStats(
    request: GetReviewStatsRequest,
    metadata?: Metadata,
  ): Promise<GetReviewStatsResponse> | Observable<GetReviewStatsResponse> | GetReviewStatsResponse;
}

export function ReviewsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createReview", "updateReview", "getReview", "getUserReviews", "getReviewStats"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ReviewsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ReviewsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const REVIEWS_SERVICE_NAME = "ReviewsService";
