// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: src/proto/offers.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "offers";

export interface CreateOfferRequest {
  userId: string;
  listingId: string;
  amount: number;
  currency: string;
  message: string;
  metadata: { [key: string]: string };
}

export interface CreateOfferRequest_MetadataEntry {
  key: string;
  value: string;
}

export interface CreateOfferResponse {
  success: boolean;
  offerId: string;
}

export interface GetOfferRequest {
  offerId: string;
}

export interface GetOfferResponse {
  offer: Offer | undefined;
}

export interface ListOffersRequest {
  userId: string;
  listingId: string;
  limit: number;
  offset: number;
  status: string;
}

export interface ListOffersResponse {
  offers: Offer[];
  total: number;
}

export interface UpdateOfferRequest {
  offerId: string;
  amount: number;
  currency: string;
  message: string;
  status: string;
  metadata: { [key: string]: string };
}

export interface UpdateOfferRequest_MetadataEntry {
  key: string;
  value: string;
}

export interface UpdateOfferResponse {
  success: boolean;
}

export interface DeleteOfferRequest {
  offerId: string;
}

export interface DeleteOfferResponse {
  success: boolean;
}

export interface Offer {
  id: string;
  userId: string;
  listingId: string;
  amount: number;
  currency: string;
  message: string;
  status: string;
  createdAt: string;
  updatedAt: string;
  metadata: { [key: string]: string };
}

export interface Offer_MetadataEntry {
  key: string;
  value: string;
}

export const OFFERS_PACKAGE_NAME = "offers";

export interface OffersServiceClient {
  createOffer(request: CreateOfferRequest, metadata?: Metadata): Observable<CreateOfferResponse>;

  getOffer(request: GetOfferRequest, metadata?: Metadata): Observable<GetOfferResponse>;

  listOffers(request: ListOffersRequest, metadata?: Metadata): Observable<ListOffersResponse>;

  updateOffer(request: UpdateOfferRequest, metadata?: Metadata): Observable<UpdateOfferResponse>;

  deleteOffer(request: DeleteOfferRequest, metadata?: Metadata): Observable<DeleteOfferResponse>;
}

export interface OffersServiceController {
  createOffer(
    request: CreateOfferRequest,
    metadata?: Metadata,
  ): Promise<CreateOfferResponse> | Observable<CreateOfferResponse> | CreateOfferResponse;

  getOffer(
    request: GetOfferRequest,
    metadata?: Metadata,
  ): Promise<GetOfferResponse> | Observable<GetOfferResponse> | GetOfferResponse;

  listOffers(
    request: ListOffersRequest,
    metadata?: Metadata,
  ): Promise<ListOffersResponse> | Observable<ListOffersResponse> | ListOffersResponse;

  updateOffer(
    request: UpdateOfferRequest,
    metadata?: Metadata,
  ): Promise<UpdateOfferResponse> | Observable<UpdateOfferResponse> | UpdateOfferResponse;

  deleteOffer(
    request: DeleteOfferRequest,
    metadata?: Metadata,
  ): Promise<DeleteOfferResponse> | Observable<DeleteOfferResponse> | DeleteOfferResponse;
}

export function OffersServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createOffer", "getOffer", "listOffers", "updateOffer", "deleteOffer"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("OffersService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("OffersService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const OFFERS_SERVICE_NAME = "OffersService";
