// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: src/proto/listings.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "listings";

export interface CreateListingRequest {
  userId: string;
  title: string;
  description: string;
  price: number;
  currency: string;
  category: string;
  metadata: { [key: string]: string };
}

export interface CreateListingRequest_MetadataEntry {
  key: string;
  value: string;
}

export interface CreateListingResponse {
  success: boolean;
  listingId: string;
}

export interface GetListingRequest {
  listingId: string;
}

export interface GetListingResponse {
  listing: Listing | undefined;
}

export interface ListListingsRequest {
  userId: string;
  limit: number;
  offset: number;
  category: string;
  status: string;
}

export interface ListListingsResponse {
  listings: Listing[];
  total: number;
}

export interface UpdateListingRequest {
  listingId: string;
  title: string;
  description: string;
  price: number;
  currency: string;
  category: string;
  status: string;
  metadata: { [key: string]: string };
}

export interface UpdateListingRequest_MetadataEntry {
  key: string;
  value: string;
}

export interface UpdateListingResponse {
  success: boolean;
}

export interface DeleteListingRequest {
  listingId: string;
}

export interface DeleteListingResponse {
  success: boolean;
}

export interface Listing {
  id: string;
  userId: string;
  title: string;
  description: string;
  price: number;
  currency: string;
  category: string;
  status: string;
  createdAt: string;
  updatedAt: string;
  metadata: { [key: string]: string };
}

export interface Listing_MetadataEntry {
  key: string;
  value: string;
}

export const LISTINGS_PACKAGE_NAME = "listings";

export interface ListingsServiceClient {
  createListing(request: CreateListingRequest, metadata?: Metadata): Observable<CreateListingResponse>;

  getListing(request: GetListingRequest, metadata?: Metadata): Observable<GetListingResponse>;

  listListings(request: ListListingsRequest, metadata?: Metadata): Observable<ListListingsResponse>;

  updateListing(request: UpdateListingRequest, metadata?: Metadata): Observable<UpdateListingResponse>;

  deleteListing(request: DeleteListingRequest, metadata?: Metadata): Observable<DeleteListingResponse>;
}

export interface ListingsServiceController {
  createListing(
    request: CreateListingRequest,
    metadata?: Metadata,
  ): Promise<CreateListingResponse> | Observable<CreateListingResponse> | CreateListingResponse;

  getListing(
    request: GetListingRequest,
    metadata?: Metadata,
  ): Promise<GetListingResponse> | Observable<GetListingResponse> | GetListingResponse;

  listListings(
    request: ListListingsRequest,
    metadata?: Metadata,
  ): Promise<ListListingsResponse> | Observable<ListListingsResponse> | ListListingsResponse;

  updateListing(
    request: UpdateListingRequest,
    metadata?: Metadata,
  ): Promise<UpdateListingResponse> | Observable<UpdateListingResponse> | UpdateListingResponse;

  deleteListing(
    request: DeleteListingRequest,
    metadata?: Metadata,
  ): Promise<DeleteListingResponse> | Observable<DeleteListingResponse> | DeleteListingResponse;
}

export function ListingsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createListing", "getListing", "listListings", "updateListing", "deleteListing"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ListingsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ListingsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const LISTINGS_SERVICE_NAME = "ListingsService";
