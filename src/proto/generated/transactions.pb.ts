// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: src/proto/transactions.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "transactions";

export interface CreateTransactionRequest {
  userId: string;
  type: string;
  amount: number;
  currency: string;
  description: string;
  metadata: { [key: string]: string };
}

export interface CreateTransactionRequest_MetadataEntry {
  key: string;
  value: string;
}

export interface CreateTransactionResponse {
  success: boolean;
  transactionId: string;
}

export interface GetTransactionRequest {
  transactionId: string;
}

export interface GetTransactionResponse {
  transaction: Transaction | undefined;
}

export interface ListTransactionsRequest {
  userId: string;
  limit: number;
  offset: number;
  status: string;
  type: string;
}

export interface ListTransactionsResponse {
  transactions: Transaction[];
  total: number;
}

export interface UpdateTransactionStatusRequest {
  transactionId: string;
  status: string;
  reason: string;
}

export interface UpdateTransactionStatusResponse {
  success: boolean;
}

export interface Transaction {
  id: string;
  userId: string;
  type: string;
  amount: number;
  currency: string;
  status: string;
  description: string;
  createdAt: string;
  updatedAt: string;
  metadata: { [key: string]: string };
}

export interface Transaction_MetadataEntry {
  key: string;
  value: string;
}

export const TRANSACTIONS_PACKAGE_NAME = "transactions";

export interface TransactionsServiceClient {
  createTransaction(request: CreateTransactionRequest, metadata?: Metadata): Observable<CreateTransactionResponse>;

  getTransaction(request: GetTransactionRequest, metadata?: Metadata): Observable<GetTransactionResponse>;

  listTransactions(request: ListTransactionsRequest, metadata?: Metadata): Observable<ListTransactionsResponse>;

  updateTransactionStatus(
    request: UpdateTransactionStatusRequest,
    metadata?: Metadata,
  ): Observable<UpdateTransactionStatusResponse>;
}

export interface TransactionsServiceController {
  createTransaction(
    request: CreateTransactionRequest,
    metadata?: Metadata,
  ): Promise<CreateTransactionResponse> | Observable<CreateTransactionResponse> | CreateTransactionResponse;

  getTransaction(
    request: GetTransactionRequest,
    metadata?: Metadata,
  ): Promise<GetTransactionResponse> | Observable<GetTransactionResponse> | GetTransactionResponse;

  listTransactions(
    request: ListTransactionsRequest,
    metadata?: Metadata,
  ): Promise<ListTransactionsResponse> | Observable<ListTransactionsResponse> | ListTransactionsResponse;

  updateTransactionStatus(
    request: UpdateTransactionStatusRequest,
    metadata?: Metadata,
  ):
    | Promise<UpdateTransactionStatusResponse>
    | Observable<UpdateTransactionStatusResponse>
    | UpdateTransactionStatusResponse;
}

export function TransactionsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createTransaction",
      "getTransaction",
      "listTransactions",
      "updateTransactionStatus",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TransactionsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TransactionsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TRANSACTIONS_SERVICE_NAME = "TransactionsService";
