// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: src/proto/notifications.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "notifications";

export interface SendNotificationRequest {
  userId: string;
  message: string;
  type: string;
  metadata: { [key: string]: string };
}

export interface SendNotificationRequest_MetadataEntry {
  key: string;
  value: string;
}

export interface SendNotificationResponse {
  success: boolean;
  notificationId: string;
}

export interface GetNotificationsRequest {
  userId: string;
  limit: number;
  offset: number;
  unreadOnly: boolean;
}

export interface GetNotificationsResponse {
  notifications: Notification[];
  total: number;
}

export interface MarkAsReadRequest {
  userId: string;
  notificationId: string;
}

export interface MarkAsReadResponse {
  success: boolean;
}

export interface Notification {
  id: string;
  userId: string;
  message: string;
  type: string;
  createdAt: string;
  read: boolean;
  metadata: { [key: string]: string };
}

export interface Notification_MetadataEntry {
  key: string;
  value: string;
}

export const NOTIFICATIONS_PACKAGE_NAME = "notifications";

export interface NotificationsServiceClient {
  sendNotification(request: SendNotificationRequest, metadata?: Metadata): Observable<SendNotificationResponse>;

  getNotifications(request: GetNotificationsRequest, metadata?: Metadata): Observable<GetNotificationsResponse>;

  markAsRead(request: MarkAsReadRequest, metadata?: Metadata): Observable<MarkAsReadResponse>;
}

export interface NotificationsServiceController {
  sendNotification(
    request: SendNotificationRequest,
    metadata?: Metadata,
  ): Promise<SendNotificationResponse> | Observable<SendNotificationResponse> | SendNotificationResponse;

  getNotifications(
    request: GetNotificationsRequest,
    metadata?: Metadata,
  ): Promise<GetNotificationsResponse> | Observable<GetNotificationsResponse> | GetNotificationsResponse;

  markAsRead(
    request: MarkAsReadRequest,
    metadata?: Metadata,
  ): Promise<MarkAsReadResponse> | Observable<MarkAsReadResponse> | MarkAsReadResponse;
}

export function NotificationsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["sendNotification", "getNotifications", "markAsRead"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("NotificationsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("NotificationsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const NOTIFICATIONS_SERVICE_NAME = "NotificationsService";
