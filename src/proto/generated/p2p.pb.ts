// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: src/proto/p2p.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "p2p";

export enum ExchangeType {
  /** CRYPTO2FIAT - Сделка: Customer передаёт крипту и получает фиат вне платформы. */
  CRYPTO2FIAT = 0,
  /** FIAT2CRYPTO - Сделка: Customer передаёт фиат вне платформы и получает крипту. */
  FIAT2CRYPTO = 1,
  UNRECOGNIZED = -1,
}

export enum TransactionStatus {
  /** PENDING - Сделка создана, средства заблокированы, ждём ответа Exchanger'а. */
  PENDING = 0,
  /** APPROVED - Exchanger принял заявку – сделка начата. */
  APPROVED = 1,
  /** DECLINED - Exchanger отклонил заявку. */
  DECLINED = 2,
  /** PAYMENT_CONFIRMED - Exchanger подтвердил перевод фиата по сделке. */
  PAYMENT_CONFIRMED = 3,
  /** RECEIPT_CONFIRMED - Customer подтвердил получение фиата – сделка завершена. */
  RECEIPT_CONFIRMED = 4,
  /** FINISHED - Сделка завершена (финальное состояние). */
  FINISHED = 5,
  /** CANCELLED - Сделка отменена (например, по таймауту или вручную). */
  CANCELLED = 6,
  /** DISPUTE_OPEN - Сделка переведена в спор. */
  DISPUTE_OPEN = 7,
  /** DISPUTE_RESOLVED - Спор разрешён администратором. */
  DISPUTE_RESOLVED = 8,
  UNRECOGNIZED = -1,
}

export enum RespondAction {
  /** ACCEPT - Exchanger принимает сделку. */
  ACCEPT = 0,
  /** DECLINE - Exchanger отклоняет сделку. */
  DECLINE = 1,
  UNRECOGNIZED = -1,
}

export enum Role {
  CUSTOMER = 0,
  EXCHANGER = 1,
  UNRECOGNIZED = -1,
}

export interface CreateExchangeOfferRequest {
  /** Идентификатор Customer'а */
  customerId: string;
  /** Идентификатор Exchange Listing */
  listingId: string;
  /** Сумма сделки */
  amount: number;
  /** Тип сделки */
  exchangeType: ExchangeType;
  /** Дополнительные условия */
  conditions: string;
}

export interface CreateExchangeOfferResponse {
  /** ID предложения */
  offerId: string;
  /** Статус */
  status: TransactionStatus;
  /** Сообщение */
  message: string;
}

export interface RespondExchangeOfferRequest {
  offerId: string;
  exchangerId: string;
  action: RespondAction;
}

export interface RespondExchangeOfferResponse {
  offerId: string;
  status: TransactionStatus;
  message: string;
}

export interface ConfirmPaymentRequest {
  offerId: string;
  exchangerId: string;
  paymentReference: string;
}

export interface ConfirmPaymentResponse {
  offerId: string;
  status: TransactionStatus;
  message: string;
}

export interface ConfirmReceiptRequest {
  offerId: string;
  customerId: string;
}

export interface ConfirmReceiptResponse {
  offerId: string;
  status: TransactionStatus;
  message: string;
}

export interface OpenDisputeRequest {
  offerId: string;
  openedBy: Role;
  reason: string;
}

export interface OpenDisputeResponse {
  disputeId: string;
  status: TransactionStatus;
  message: string;
}

export interface TransactionStatusRequest {
  offerId: string;
}

export interface TransactionStatusResponse {
  offerId: string;
  status: TransactionStatus;
  details: string;
}

export interface SetExchangerStatusRequest {
  exchangerId: string;
  online: boolean;
}

export interface SetExchangerStatusResponse {
  exchangerId: string;
  online: boolean;
  message: string;
}

export interface CancelTransactionRequest {
  offerId: string;
  cancelledBy: Role;
  reason: string;
}

export interface CancelTransactionResponse {
  offerId: string;
  status: TransactionStatus;
  message: string;
}

export interface ResolveDisputeRequest {
  disputeId: string;
  adminId: string;
  resolution: string;
  winnerUserId: string;
  finalStatus: TransactionStatus;
}

export interface ResolveDisputeResponse {
  disputeId: string;
  status: TransactionStatus;
  message: string;
  winnerUserId: string;
  finalStatus: TransactionStatus;
}

export interface FreezeExchangerRequest {
  exchangerId: string;
  reason: string;
}

export interface FreezeExchangerResponse {
  exchangerId: string;
  isFrozen: boolean;
  message: string;
}

export const P2P_PACKAGE_NAME = "p2p";

export interface P2PExchangeServiceClient {
  createExchangeOffer(
    request: CreateExchangeOfferRequest,
    metadata?: Metadata,
  ): Observable<CreateExchangeOfferResponse>;

  respondExchangeOffer(
    request: RespondExchangeOfferRequest,
    metadata?: Metadata,
  ): Observable<RespondExchangeOfferResponse>;

  confirmPayment(request: ConfirmPaymentRequest, metadata?: Metadata): Observable<ConfirmPaymentResponse>;

  confirmReceipt(request: ConfirmReceiptRequest, metadata?: Metadata): Observable<ConfirmReceiptResponse>;

  openDispute(request: OpenDisputeRequest, metadata?: Metadata): Observable<OpenDisputeResponse>;

  getTransactionStatus(request: TransactionStatusRequest, metadata?: Metadata): Observable<TransactionStatusResponse>;

  setExchangerStatus(request: SetExchangerStatusRequest, metadata?: Metadata): Observable<SetExchangerStatusResponse>;

  cancelTransaction(request: CancelTransactionRequest, metadata?: Metadata): Observable<CancelTransactionResponse>;

  resolveDispute(request: ResolveDisputeRequest, metadata?: Metadata): Observable<ResolveDisputeResponse>;

  freezeExchanger(request: FreezeExchangerRequest, metadata?: Metadata): Observable<FreezeExchangerResponse>;
}

export interface P2PExchangeServiceController {
  createExchangeOffer(
    request: CreateExchangeOfferRequest,
    metadata?: Metadata,
  ): Promise<CreateExchangeOfferResponse> | Observable<CreateExchangeOfferResponse> | CreateExchangeOfferResponse;

  respondExchangeOffer(
    request: RespondExchangeOfferRequest,
    metadata?: Metadata,
  ): Promise<RespondExchangeOfferResponse> | Observable<RespondExchangeOfferResponse> | RespondExchangeOfferResponse;

  confirmPayment(
    request: ConfirmPaymentRequest,
    metadata?: Metadata,
  ): Promise<ConfirmPaymentResponse> | Observable<ConfirmPaymentResponse> | ConfirmPaymentResponse;

  confirmReceipt(
    request: ConfirmReceiptRequest,
    metadata?: Metadata,
  ): Promise<ConfirmReceiptResponse> | Observable<ConfirmReceiptResponse> | ConfirmReceiptResponse;

  openDispute(
    request: OpenDisputeRequest,
    metadata?: Metadata,
  ): Promise<OpenDisputeResponse> | Observable<OpenDisputeResponse> | OpenDisputeResponse;

  getTransactionStatus(
    request: TransactionStatusRequest,
    metadata?: Metadata,
  ): Promise<TransactionStatusResponse> | Observable<TransactionStatusResponse> | TransactionStatusResponse;

  setExchangerStatus(
    request: SetExchangerStatusRequest,
    metadata?: Metadata,
  ): Promise<SetExchangerStatusResponse> | Observable<SetExchangerStatusResponse> | SetExchangerStatusResponse;

  cancelTransaction(
    request: CancelTransactionRequest,
    metadata?: Metadata,
  ): Promise<CancelTransactionResponse> | Observable<CancelTransactionResponse> | CancelTransactionResponse;

  resolveDispute(
    request: ResolveDisputeRequest,
    metadata?: Metadata,
  ): Promise<ResolveDisputeResponse> | Observable<ResolveDisputeResponse> | ResolveDisputeResponse;

  freezeExchanger(
    request: FreezeExchangerRequest,
    metadata?: Metadata,
  ): Promise<FreezeExchangerResponse> | Observable<FreezeExchangerResponse> | FreezeExchangerResponse;
}

export function P2PExchangeServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createExchangeOffer",
      "respondExchangeOffer",
      "confirmPayment",
      "confirmReceipt",
      "openDispute",
      "getTransactionStatus",
      "setExchangerStatus",
      "cancelTransaction",
      "resolveDispute",
      "freezeExchanger",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("P2PExchangeService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("P2PExchangeService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const P2_P_EXCHANGE_SERVICE_NAME = "P2PExchangeService";
