// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: src/proto/audit.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "audit";

export interface CreateAuditLogRequest {
  userId: string;
  action: string;
  entityType: string;
  entityId: string;
  details: string;
  ipAddress: string;
}

export interface GetAuditLogsRequest {
  userId?: string | undefined;
  entityType?: string | undefined;
  entityId?: string | undefined;
  startDate?: string | undefined;
  endDate?: string | undefined;
  page: number;
  limit: number;
}

export interface AuditLogsResponse {
  logs: AuditLog[];
  total: number;
  page: number;
  limit: number;
}

export interface AuditLog {
  id: string;
  userId: string;
  action: string;
  entityType: string;
  entityId: string;
  details: string;
  ipAddress: string;
  createdAt: string;
}

export const AUDIT_PACKAGE_NAME = "audit";

export interface AuditServiceClient {
  createAuditLog(request: CreateAuditLogRequest, metadata?: Metadata): Observable<AuditLog>;

  getAuditLogs(request: GetAuditLogsRequest, metadata?: Metadata): Observable<AuditLogsResponse>;
}

export interface AuditServiceController {
  createAuditLog(
    request: CreateAuditLogRequest,
    metadata?: Metadata,
  ): Promise<AuditLog> | Observable<AuditLog> | AuditLog;

  getAuditLogs(
    request: GetAuditLogsRequest,
    metadata?: Metadata,
  ): Promise<AuditLogsResponse> | Observable<AuditLogsResponse> | AuditLogsResponse;
}

export function AuditServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createAuditLog", "getAuditLogs"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuditService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuditService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUDIT_SERVICE_NAME = "AuditService";
