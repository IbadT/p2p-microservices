// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: src/proto/chat.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "chat";

export interface CreateDisputeChatRequest {
  disputeId: string;
  userId: string;
}

export interface AddModeratorToChatRequest {
  chatId: string;
  moderatorId: string;
}

export interface SendMessageRequest {
  chatId: string;
  senderId: string;
  content: string;
}

export interface GetChatMessagesRequest {
  chatId: string;
  userId: string;
  page: number;
  limit: number;
}

export interface GetChatMessagesResponse {
  messages: Message[];
  total: number;
}

export interface GetDisputeChatRequest {
  disputeId: string;
  userId: string;
}

export interface GetChatHistoryRequest {
  chatId: string;
  userId: string;
  page: number;
  limit: number;
}

export interface GetChatHistoryResponse {
  chat: Chat | undefined;
  messages: Message[];
  total: number;
}

export interface AddModeratorCommentRequest {
  disputeId: string;
  moderatorId: string;
  text: string;
}

export interface GetDisputeCommentsRequest {
  disputeId: string;
  userId: string;
}

export interface GetDisputeCommentsResponse {
  comments: Comment[];
}

export interface Chat {
  id: string;
  disputeId: string;
  participants: ChatParticipant[];
  createdAt: string;
  updatedAt: string;
}

export interface ChatParticipant {
  id: string;
  chatId: string;
  userId: string;
  role: string;
  createdAt: string;
  updatedAt: string;
}

export interface Message {
  id: string;
  chatId: string;
  userId: string;
  content: string;
  isModeratorMessage: boolean;
  createdAt: string;
  updatedAt: string;
  user: User | undefined;
}

export interface User {
  id: string;
  email: string;
}

export interface Comment {
  id: string;
  disputeId: string;
  userId: string;
  text: string;
  isModeratorComment: boolean;
  createdAt: string;
  updatedAt: string;
  user: User | undefined;
}

export const CHAT_PACKAGE_NAME = "chat";

export interface ChatServiceClient {
  createDisputeChat(request: CreateDisputeChatRequest, metadata?: Metadata): Observable<Chat>;

  addModeratorToChat(request: AddModeratorToChatRequest, metadata?: Metadata): Observable<Chat>;

  sendMessage(request: SendMessageRequest, metadata?: Metadata): Observable<Message>;

  getChatMessages(request: GetChatMessagesRequest, metadata?: Metadata): Observable<GetChatMessagesResponse>;

  getDisputeChat(request: GetDisputeChatRequest, metadata?: Metadata): Observable<Chat>;

  getChatHistory(request: GetChatHistoryRequest, metadata?: Metadata): Observable<GetChatHistoryResponse>;

  addModeratorComment(request: AddModeratorCommentRequest, metadata?: Metadata): Observable<Comment>;

  getDisputeComments(request: GetDisputeCommentsRequest, metadata?: Metadata): Observable<GetDisputeCommentsResponse>;
}

export interface ChatServiceController {
  createDisputeChat(request: CreateDisputeChatRequest, metadata?: Metadata): Promise<Chat> | Observable<Chat> | Chat;

  addModeratorToChat(request: AddModeratorToChatRequest, metadata?: Metadata): Promise<Chat> | Observable<Chat> | Chat;

  sendMessage(request: SendMessageRequest, metadata?: Metadata): Promise<Message> | Observable<Message> | Message;

  getChatMessages(
    request: GetChatMessagesRequest,
    metadata?: Metadata,
  ): Promise<GetChatMessagesResponse> | Observable<GetChatMessagesResponse> | GetChatMessagesResponse;

  getDisputeChat(request: GetDisputeChatRequest, metadata?: Metadata): Promise<Chat> | Observable<Chat> | Chat;

  getChatHistory(
    request: GetChatHistoryRequest,
    metadata?: Metadata,
  ): Promise<GetChatHistoryResponse> | Observable<GetChatHistoryResponse> | GetChatHistoryResponse;

  addModeratorComment(
    request: AddModeratorCommentRequest,
    metadata?: Metadata,
  ): Promise<Comment> | Observable<Comment> | Comment;

  getDisputeComments(
    request: GetDisputeCommentsRequest,
    metadata?: Metadata,
  ): Promise<GetDisputeCommentsResponse> | Observable<GetDisputeCommentsResponse> | GetDisputeCommentsResponse;
}

export function ChatServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createDisputeChat",
      "addModeratorToChat",
      "sendMessage",
      "getChatMessages",
      "getDisputeChat",
      "getChatHistory",
      "addModeratorComment",
      "getDisputeComments",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ChatService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ChatService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CHAT_SERVICE_NAME = "ChatService";
