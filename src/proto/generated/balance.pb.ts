// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: src/proto/balance.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "balance";

export interface Empty {
}

export interface GetBalanceRequest {
  userId: string;
}

export interface Balance {
  id: string;
  userId: string;
  cryptoBalance: { [key: string]: number };
  totalHoldAmount: { [key: string]: number };
  createdAt: string;
  updatedAt: string;
}

export interface Balance_CryptoBalanceEntry {
  key: string;
  value: number;
}

export interface Balance_TotalHoldAmountEntry {
  key: string;
  value: number;
}

export interface CreateHoldRequest {
  userId: string;
  cryptocurrency: string;
  amount: number;
  type: string;
  relatedTransactionId?: string | undefined;
}

export interface BalanceHold {
  id: string;
  userId: string;
  cryptocurrency: string;
  amount: number;
  type: string;
  relatedTransactionId?: string | undefined;
  expiresAt?: string | undefined;
  createdAt: string;
  updatedAt: string;
}

export interface ReleaseHoldRequest {
  holdId: string;
}

export interface TransferRequest {
  fromUserId: string;
  toUserId: string;
  cryptocurrency: string;
  amount: number;
  transactionId: string;
}

export interface DepositRequest {
  userId: string;
  cryptocurrency: string;
  amount: number;
}

export interface WithdrawRequest {
  userId: string;
  cryptocurrency: string;
  amount: number;
}

export interface GetTransactionHistoryRequest {
  userId: string;
  cryptocurrency?: string | undefined;
  startDate?: string | undefined;
  endDate?: string | undefined;
  page?: number | undefined;
  limit?: number | undefined;
}

export interface TransactionHistoryEntry {
  id: string;
  userId: string;
  type: string;
  cryptocurrency: string;
  amount: number;
  relatedTransactionId?: string | undefined;
  status: string;
  createdAt: string;
}

export interface GetTransactionHistoryResponse {
  transactions: TransactionHistoryEntry[];
  total: number;
  page: number;
  limit: number;
}

export const BALANCE_PACKAGE_NAME = "balance";

export interface BalanceServiceClient {
  getBalance(request: GetBalanceRequest, metadata?: Metadata): Observable<Balance>;

  createHold(request: CreateHoldRequest, metadata?: Metadata): Observable<BalanceHold>;

  releaseHold(request: ReleaseHoldRequest, metadata?: Metadata): Observable<Empty>;

  transfer(request: TransferRequest, metadata?: Metadata): Observable<Empty>;

  deposit(request: DepositRequest, metadata?: Metadata): Observable<Balance>;

  withdraw(request: WithdrawRequest, metadata?: Metadata): Observable<Balance>;

  getTransactionHistory(
    request: GetTransactionHistoryRequest,
    metadata?: Metadata,
  ): Observable<GetTransactionHistoryResponse>;
}

export interface BalanceServiceController {
  getBalance(request: GetBalanceRequest, metadata?: Metadata): Promise<Balance> | Observable<Balance> | Balance;

  createHold(
    request: CreateHoldRequest,
    metadata?: Metadata,
  ): Promise<BalanceHold> | Observable<BalanceHold> | BalanceHold;

  releaseHold(request: ReleaseHoldRequest, metadata?: Metadata): Promise<Empty> | Observable<Empty> | Empty;

  transfer(request: TransferRequest, metadata?: Metadata): Promise<Empty> | Observable<Empty> | Empty;

  deposit(request: DepositRequest, metadata?: Metadata): Promise<Balance> | Observable<Balance> | Balance;

  withdraw(request: WithdrawRequest, metadata?: Metadata): Promise<Balance> | Observable<Balance> | Balance;

  getTransactionHistory(
    request: GetTransactionHistoryRequest,
    metadata?: Metadata,
  ): Promise<GetTransactionHistoryResponse> | Observable<GetTransactionHistoryResponse> | GetTransactionHistoryResponse;
}

export function BalanceServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getBalance",
      "createHold",
      "releaseHold",
      "transfer",
      "deposit",
      "withdraw",
      "getTransactionHistory",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("BalanceService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("BalanceService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const BALANCE_SERVICE_NAME = "BalanceService";
